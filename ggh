#!/bin/bash
#
# ggh -- git-gerrit helper
#
#


show_usage () {
    echo '
ggh - git-gerrit helper - 0.1

"ggh setup"  - Setup the git aliases listed below in your global git config.  Note, each git alias just calls through to ggh with the arguments passed in.  So ggh could be used directly without the git aliases.

Git Aliases

"git gerrit-clone <url>" ---> git clone <url>, then setup post-commit hook

"git start <local branch> <remote branch>" ---> git checkout -b $1 origin/$2

"git upload" ---> show summary of changes to be uploaded, approve, upload

"git prune" ----> remove all branches not ahead of the remote'

}

cmd_setup () {

    type -P ggh &>/dev/null || { echo "ggh must be in your PATH var in order to be setup." >&2; exit 1; }

    type -P git &>/dev/null || { echo "git must be in your PATH var in order to be setup." >&2; exit 1; }

    echo "Setting up 'git gerrit-clone'"
    git config --global alias.gerrit-clone '!sh ggh gerrit-clone'

    echo "Setting up 'git start'"
    git config --global alias.start '!sh ggh start'

    echo "Setting up 'git upload'"
    git config --global alias.upload '!sh ggh upload'

    echo "Setting up 'git prune'"
    git config --global alias.prune '!sh ggh prune'
    
    echo "Done."

}

cmd_gerrit_clone () {
    git clone $1
    project=`echo $1 | sed -E "s/.*\///"`
    gerrit=`echo $1 | sed -E "s/ssh:\/\/([^:\/]*).*/\1/"`
    scp $gerrit:hooks/commit-msg $project/.git/hooks
}

cmd_start () {
    git checkout -b $1 origin/$2
}

cmd_upload () {
    ensure_status_clean

    local_branch=`git symbolic-ref HEAD | sed -e 's|^refs/heads/||'`
    remote_branch=`git config branch.$local_branch.merge | sed -e 's|^refs/heads/||'`

    if [ -z "$remote_branch" ]
    then
	echo "ggh error: This branch is not tracking a remote branch, upload not possible."
	exit 1
    fi

    #show preview
    git log --graph --stat origin/$remote_branch..
    
    #make user confirm upload
    echo
    echo -n "Are you sure you would like to upload these changes for review? [y/N]"
    read -n1 answer
    echo 
    
    if [ -z "$answer" ]
    then
	answer="n"
    fi

    # push if they said yes
    if [ "$answer" == "y" -o "$answer" == "Y" ]
    then
	git push origin HEAD:refs/for/$remote_branch
    else
	echo "Aborting upload."
    fi

}

cmd_prune () {
    ensure_status_clean
    git fetch origin

    #lets not try to delete the branch you're on
    exclude=`git symbolic-ref HEAD | sed -e 's|^refs/heads/||'`

    for branch in $(git for-each-ref --format='%(refname)' refs/heads/); do
	simple_branch=`echo $branch | sed -e 's|^refs/heads/||'`
	remote=`git config branch.$simple_branch.merge | sed -e 's|^refs/heads/||'`
	diff=`git log --oneline "$branch" ^origin/$remote`
	if [ "$simple_branch" != "$exclude" -a -z "$diff" ]
	then
	    git branch -D $simple_branch
	fi
    done

}

ensure_status_clean () {
    #check for clean status
    status=`git status -s`
    if [ -n "$status" ] 
    then
	echo "ggh error: Could not complete command. Git status is not clean, please commit or stash changes and try again."
	exit 1
    fi
}

case "$1" in
    setup)
	cmd_setup
	;;

    gerrit-clone)
	cmd_gerrit_clone $2
	;;

    start)
	cmd_start $2 $3
	;;

    upload)
	cmd_upload
	;;

    prune)
	cmd_prune
	;;

    *)
	show_usage
	;;

esac
